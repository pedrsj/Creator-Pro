#############################################
# These are the basic macros to Creator Pro #
#############################################

###
# ACTIVATE_EXTRUDER
#
# Overriden to provided seemless support for slicers that have default Klipper support e.g. SuperSlicer
###
[gcode_macro ACTIVATE_EXTRUDER]
rename_existing: _KLIPPER_ACTIVATE_EXTRUDER
variable_active_index: -1
gcode:
    {% set extruder = params.EXTRUDER|default("extruder")|lower|string %}

    # Set offsets
    # If your extruder nozzles aren't at the same height, set appropriate Z value for the required extruder 
    {% if extruder == "extruder" %}
      SET_GCODE_OFFSET X=-34 Y=0 Z=0 MOVE=0
    {% else %}
      SET_GCODE_OFFSET X=0 Y=0 Z=0 MOVE=0
    {% endif %}
    SET_GCODE_VARIABLE MACRO=ACTIVATE_EXTRUDER VARIABLE=active_index VALUE={0 if extruder == "extruder" else 1}

    _KLIPPER_ACTIVATE_EXTRUDER EXTRUDER={extruder}

###
# T0
#
# Marlin support for setting extruder
###
[gcode_macro T0]
gcode:
    ACTIVATE_EXTRUDER EXTRUDER=extruder

###
# T1
#
# Marlin support for setting extruder1
###
[gcode_macro T1]
gcode:
    ACTIVATE_EXTRUDER EXTRUDER=extruder1

###
# M486
#
# For slicers that generate this Marlin codes (dummy macro to do nothing), stops unknown command message being displayed
###
[gcode_macro M486]
gcode:

###
# START_PRINT
#
# In slicer start GCode: 
#
# Set MESH=true, if you want MESH logic to execute
#
# Cura:
# -----
# START_PRINT BED={material_bed_temperature_layer_0} EXTRUDER={material_print_temperature_layer_0, 0} EXTRUDER1={material_print_temperature_layer_0, 1} MESH=false EXTRUDERS_ENABLED={extruders_enabled_count} INITIAL_EXTRUDER={adhesion_extruder_nr}
#
# Note: If only using one extruder, disabled the other in Cura before generating output
#
# PrusaSlicer:
# ------------
# M140 S0   ; 
# M104 S0 T0; Stop slicer generating its own heater settings
# M104 S0 T1;
# START_PRINT BED=[first_layer_bed_temperature] EXTRUDER={first_layer_temperature[0]} EXTRUDER1={first_layer_temperature[1]} MESH=false EXTRUDERS_ENABLED={(filament_preset[0] != filament_preset[1]? 2 : 1)} INITIAL_EXTRUDER=[initial_extruder]
#
# Note: If only using one extruder, set both extruders to the same filament in PrusaSlicer before generating output
#
# SuperSlicer:
# ------------
# M140 S0   ; 
# M104 S0 T0; Stop slicer generating its own heater settings
# M104 S0 T1; Not required if firmware set to klipper
# START_PRINT BED=[first_layer_bed_temperature] EXTRUDER={first_layer_temperature[0]+extruder_temperature_offset[0]} EXTRUDER1={first_layer_temperature[1]+extruder_temperature_offset[1]} MESH=false EXTRUDERS_ENABLED={(filament_preset[0] != filament_preset[1]? 2 : 1)} INITIAL_EXTRUDER=[initial_extruder] 
#
# Note: If only using one extruder, set both extruders to the same filament in PrusaSlicer before generating output
#
###
[gcode_macro START_PRINT]
variable_bed_target: 0.0
variable_extruder_target: 0.0
variable_extruder1_target: 0.0
gcode:
    # Set some defaults
    {% set extruders_enabled = params.EXTRUDERS_ENABLED|default(2)|int %}; extruders enabled within slicer 
    {% set initial_extruder = params.INITIAL_EXTRUDER|default(0)|int %}; initial extruder active for print 
    {% set bed = params.BED|default(0)|float %}; bed target temperature 
    # Determine which extruders are in use within the slicer and use provided temperature if the extruder is active
    {% set extruder = params.EXTRUDER|default(0)|float if initial_extruder == 0 or extruders_enabled > 1 else 0.0 %}; extruder target temperature 
    {% set extruder1 = params.EXTRUDER1|default(0)|float if initial_extruder == 1 or extruders_enabled > 1 else 0.0  %}; extruder1 target temperature 
    {% set mesh=True if params.MESH|default("false") in ("true", "1") else False %}; mesh processing

    LED_RGB RGB="rgb"

    G90

    # Indicate what will be done:
    {action_respond_info("Job parameters: bed=%.1f extruder (T0)=%.1f extruder1 (T1)=%.1f mesh=%s, extrtuder%s will be active"|format(bed, extruder, extruder1, "true" if mesh else "false", "1"|replace((initial_extruder+1)|string, "")))}

    # Set target temperature for bed
    {% if bed > 0 %}
      # Store value sop it can be referenced outside of this macro
      SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_target VALUE={bed}
      M140 S{bed}
    {% endif %}

    # Set target temperature for extruder
    {% if extruder > 0 %}
      # Store value so it can be referenced outside of this macro
      SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_target VALUE={extruder}
      M104 S{extruder} T0
    {% endif %}

    # Set target temperature for extruder1
    {% if extruder1 > 0 %}
      # Store value so it can be referenced outside of this macro
      SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder1_target VALUE={extruder1}
      M104 S{extruder1} T1
    {% endif %}

    # Home axes
    G28

    # Set active extruder to extruder and park head while everything heats
    ACTIVATE_EXTRUDER EXTRUDER="extruder"
    G1 Z30
    G1 X{printer.toolhead.axis_maximum.x + printer.toolhead.axis_minimum.x|abs if extruder > 0 else 0} Y{printer.toolhead.axis_maximum.y} F3000

    # Wait for bed to reach target temperature
    {% if bed > 0 %}
      M190 S{bed}
    {% endif %}

    # If MESH requested:
    #      If a mesh exists for bed temperature, load else
    #      If a default mesh exists, load else
    #      Generate a new mesh for this run
    #
    # Note: if saving mesh for a temperature save as an integer i.e. 100 and not 100.0
    {% if mesh %}
      {% set load_mesh = bed|int|string if printer.configfile.config["bed_mesh " ~ bed|int] is defined else "default" if printer.configfile.config["bed_mesh default"] is defined %}
      {% if load_mesh is defined %}
        {action_respond_info("Load bed mesh %s"|format(load_mesh))}
        BED_MESH_PROFILE LOAD={load_mesh}
      {% else %}
        {action_respond_info("Generate new mesh")}
        BED_MESH_CALIBRATE
      {% endif %}
    {% endif %}

    # Wait for extruders to reach their target temperature
    {% if extruder > 0 %}
      M109 S{extruder} T0
    {% endif %}
    {% if extruder1 > 0 %}
      M109 S{extruder1} T1
    {% endif %}

    # Prime extruders
    M83
    {% if extruder > 0 %}
      # Extruder is already active
      G92 E0
      {% set x = printer.toolhead.axis_maximum.x + 1 %}
      G1 X{x} Y1 F6000; can move beyhond maximum x due to offset set and x end stop position definition
      G1 Z0.4
      G1 E25 F300
      G1 X{x-30} Z0.2 E5 F1200
      G1 X{x} Y1.3 Z0.15 F1200
      G1 X{x-30} Y1.6 Z10 F1200
      G92 E0
    {% endif %}
    {% if extruder1 > 0 %}
      ACTIVATE_EXTRUDER EXTRUDER="extruder1"
      G92 E0
      G1 X-1 Y1 F6000; can move below 0 due to offset set and x end stop position definition
      G1 Z0.4
      G1 E25 F300
      G1 X30 Z0.2 E5 F1200
      G1 X-1 Y1.3 Z0.15 F1200
      G1 X30 Y1.6 Z10 F1200
      G92 E0
    {% endif %}

    M82

    # Activate initial extruder
    T{initial_extruder}

###
# END_PRINT
#
# In slicer end GCode: END_PRINT
###
[gcode_macro END_PRINT]
variable_extrude: 1.0
gcode:
    # Get values used in START_PRINT
    {% set bed = printer["gcode_macro START_PRINT"].bed_target|float %}
    {% set extruder = printer["gcode_macro START_PRINT"].extruder_target|float %}
    {% set extruder1 = printer["gcode_macro START_PRINT"].extruder1_target|float %}

    # Retract extruders if their target was set in START_PRINT and still near target temperature
    G91
    {% if extruder > 0 and printer.extruder.can_extrude|lower == "true" %}
      ACTIVATE_EXTRUDER EXTRUDER="extruder"
      G1 E-{extrude} F2000
    {% endif %}
    {% if extruder1 > 0 and printer.extruder1.can_extrude|lower == "true" %}
      ACTIVATE_EXTRUDER EXTRUDER="extruder1"
      G1 E-{extrude} F2000
    {% endif %}

    TURN_OFF_HEATERS

    {% set x = printer.toolhead.axis_maximum.x|float %}
    {% set y = printer.toolhead.axis_maximum.y|float %}
    {% set z = printer.toolhead.axis_maximum.z|float %}
    G90
    G1 X{x} Y{y} Z{z} F1000
 
    # Turn off fan
    M107

    # Disable steppers
    M84

    # Wait for movement to complete then set LED to green
    M400
    LED_RGB RGB="g"

###
# CANCEL
#
# Cancel print
###
[gcode_macro CANCEL_PRINT]
rename_existing: _KLIPPER_CANCEL_PRINT
variable_park: True
gcode:

    # Move head and retract only if not already in the pause state and park set to true
    {% if printer.pause_resume.is_paused|lower == "false" and park|lower == "true"%}
      _TOOLHEAD_PARK
    {% endif %}

    M107
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    # Set LED to red
    LED_RGB RGB="r"

    _KLIPPER_CANCEL_PRINT

###
# PAUSE
#
# Pause printer
###
[gcode_macro PAUSE]
rename_existing: _KLIPPER_PAUSE
gcode:

    SAVE_GCODE_STATE NAME=PAUSE_state

    _KLIPPER_PAUSE

    # Retract, move Z then park head
    _TOOLHEAD_PARK

    # Set LED to purple
    LED_RGB RGB="rb"


###
# RESUME
#
# Resume print
###
[gcode_macro RESUME]
rename_existing: _KLIPPER_RESUME
gcode:
    # Prepare extruder to resume
    {% set extrude = printer['gcode_macro _TOOLHEAD_PARK'].extrude %}
    {% if printer[printer.toolhead.extruder].can_extrude|lower == "true" %}
      M83
      G1 E{extrude} F2000
    {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    # Set LED back to white    
    LED_RGB RGB="rgb"

    _KLIPPER_RESUME {rawparams}

###
# _TOOLHEAD_PARK
#
# Parks head on a Pause or Cancel
###
[gcode_macro _TOOLHEAD_PARK]
variable_extrude: 1.0
gcode:
    
    {% set maximum_z = printer.toolhead.axis_maximum.z|float %}
    {% set current_z = printer.toolhead.position.z|float %}
    {% set raise_z = 5.0 %}
    {% set move_z = raise_z if current_z < (maximum_z - raise_z) else maximum_z - current_z %}

    # Only retract if the extruder can
    {% if printer[printer.toolhead.extruder].can_extrude|lower == "true" %}
      M83
      G1 E-{extrude} F2000
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}

    # Can only move from a known point
    {% if printer.toolhead.homed_axes == "xyz" %}
      G91
      G1 Z{raise_z if current_z < (maximum_z - raise_z) else maximum_z - current_z} F1000
      G90
      G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

###
# LED_RGB
#
# Set LED light based on colours defined by one or more character i.e.
# R - red
# G - green
# B - blue
#
# Macro is case-insensative, defining no value will turn LED off
#
# example - LED_RGB RGB="RGB" for white light
#           LED_RGB           to turn off
###
[gcode_macro LED_RGB]
gcode:
    {% set rgb=params.RGB|default("")|upper %}

    {% set r = 1 if "R" in rgb else 0 %}
    {% set g = 1 if "G" in rgb else 0 %}
    {% set b = 1 if "B" in rgb else 0 %}

    SET_LED LED=led_strip RED={r} GREEN={g} BLUE={b}
